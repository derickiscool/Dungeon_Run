<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CREATE THE LEVEL
//RESIZE

room_width = (CELL_WIDTH/16) * 1280 ; 
room_height = (CELL_HEIGHT/16) * 720;

//SET THE GRID WIDTH AND HEIGHT

var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

//CREATE THE GRID
grid = ds_grid_create(width, height);

//FILL THE GRID WITH THE VOID
ds_grid_set_region(grid,0,0,width-1,height-1,VOID);

//RANDOMIZE THE WORLD
randomize();

// CREATE THE CONTROLLER IN THE CENTER OF THE GRID

var cx = width div 2;
var cy = height div 2;

//CREATE PLAYER OBJECT
if (room ==rm_FirstRoom)
{
instance_create(cx*CELL_WIDTH+CELL_WIDTH/2,cy*CELL_HEIGHT+CELL_HEIGHT/2 , obj_PlayerViking)
ini_open("Save.ini")
var key = "default"
var seed = ini_read_real("Rooms", key , 0);
random_set_seed(seed)
}
else{
instance_create(-2000,-2000,obj_Player)
}

// GIVE THE CONTROLLER A RANDOM DIRECTION 
var cdir = irandom(3);

//THE ODDS VARIABLE FOR CHANGING DIRECTION
var odds = 2;

//CREATE THE LEVEL USING 1000 STEPS
repeat(1000)
{
    //PLACE A FLOOR TILE AT THE CONTROLLER POSITION
    grid [# cx,cy] = FLOOR;
    
    
    //RANDOMIZE THE DIRECTION OF THE CONTROLLER
    if (irandom(odds) == odds)
    {
        cdir = irandom(3);
        
    }
    
    //Move the controller 
    var xdir = lengthdir_x(1, cdir*90);
    var ydir = lengthdir_y(1, cdir*90);
    cx += xdir;
    cy += ydir;
    
    //MAKE SURE WE DON'T MOVE OUTSIDE GRID
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1 , height-2);

}
//ADD WALLS
for (var yy = 1; yy&lt;height-1; yy++ )
{
    for (var xx = 1; xx&lt;width - 1; xx++)
    {
        if (grid[# xx, yy ] == FLOOR)
        {
            
            //CHECK FOR WALLS
            if (grid[# xx+1, yy] != FLOOR)//IF PIXEL ON RIGHT OF FLOOR IS VOID TURN INTO WALL
            {   
                var xpos = (xx+1)*CELL_WIDTH+CELL_WIDTH/2
                var ypos = (yy)*CELL_HEIGHT+CELL_HEIGHT/2
                instance_create(xpos,ypos,obj_Wall)
                grid[# xx+1, yy] = WALL;
            }
            if (grid[# xx-1, yy] != FLOOR)//IF PIXEL OF LEFT OF FLOOR IS VOID TURN INTO WALL
            {
                var xpos = (xx-1)*CELL_WIDTH+CELL_WIDTH/2
                var ypos = (yy)*CELL_HEIGHT+CELL_HEIGHT/2
                instance_create(xpos,ypos,obj_Wall)
                grid[# xx-1, yy] = WALL;
            }
            if (grid[# xx, yy+1] != FLOOR)//IF PIXEL ABOVE FLOOR IS VOID
            {   
                var xpos = (xx)*CELL_WIDTH+CELL_WIDTH/2
                var ypos = (yy+1)*CELL_HEIGHT+CELL_HEIGHT/2
                instance_create(xpos,ypos,obj_Wall)
                grid[# xx, yy+1] = WALL;            
            }
            if (grid[# xx, yy-1] != FLOOR)//IF PIXEL BELOW FLOOR IS VOID
            {
                var xpos = (xx)*CELL_WIDTH+CELL_WIDTH/2
                var ypos = (yy-1)*CELL_HEIGHT+CELL_HEIGHT/2
                instance_create(xpos,ypos,obj_Wall)
                grid[# xx, yy-1] =WALL;
            }
        
        }
            
    }


} 

for (var yy= 1 ; yy&lt;height-1; yy++)
{
    for (var xx=1; xx &lt; width-1; xx++)
    {
        if (grid [# xx, yy ] == WALL &amp;&amp; grid [# xx+1, yy ] == FLOOR &amp;&amp; grid [# xx-1, yy ] ==FLOOR &amp;&amp; grid [# xx, yy-1 ] == FLOOR &amp;&amp; grid [# xx, yy+1 ] ==FLOOR)
        {
            grid[# xx, yy ] = FLOOR
        
        }
    
    }

}


//GET TILE SIZES
var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;

// ADD THE TILES
for (var yy = 0 ; yy &lt;height*2 ; yy++)
{   
    for (var xx=0 ; xx&lt;width*2 ; xx++)
    
    {
        if (grid[# xx div 2 , yy div 2] == FLOOR)
        {
            //GET TILE'S X AND Y 
            var tx = xx*tw;
            var ty = yy*th;
            //DRAW THE FLOOR
            var randomFloorLeft = random_range(6,9)
            var randomFloorTop = random_range(0,2)
            tile_add(ts_Dungeon,tw*randomFloorLeft,th*randomFloorTop, tw , th , tx, ty, 0)
            
            
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
            
            if (right) {
                if (bottom)
                {
                    tile_add(ts_Dungeon,tw*5,th*3,tw,th,tx+tw,ty,0)
                    tile_add(ts_Dungeon,tw*5,th*0, tw , th , tx+tw, ty, 0)  
                }
                else if (top)
                {
                    
                    tile_add(ts_Dungeon,tw*5,th*0,tw,th,tx+tw,ty,0)
                    
                }
                else {
                    var randomRight = random_range(0,3)
                    tile_add(ts_Dungeon,tw*5,th*randomRight, tw , th , tx+tw, ty, 0)
                
                }
            }
            if (left)
            {
                if (bottom)
                {
                    tile_add(ts_Dungeon,tw*0,th*3,tw,th,tx-tw,ty,0)
                    tile_add(ts_Dungeon,tw*0,th*0,tw,th,tx-tw,ty+th,0)
                
                }
                else if (top)
                {
                    
                    tile_add(ts_Dungeon,tw*0,th*0,tw,th,tx-tw,ty,0)
                   
                
                }
                else 
                {
                    var randomLeft = random_range(0,3)
                    tile_add(ts_Dungeon,tw*0,th*randomLeft, tw , th , tx-tw, ty, 0)
                    
                }
            
            
            }
            if (top)
            {
                if (!top_right)
                {
                    tile_add(ts_Dungeon,tw*0,th*0,tw,th,tx,ty-th,0)
                    tile_add(ts_Dungeon,tw*4,th*0,tw,th,tx,ty,0) 
               
                }
                else if (!top_left)
                {
                    
                     tile_add(ts_Dungeon,tw*1,th*0,tw,th,tx,ty,0)
                     tile_add(ts_Dungeon,tw*5,th*0,tw,th,tx,ty-th,0)
                    
                }
                else 
                {
                    var rand = random_range(1,4)
                    tile_add(ts_Dungeon, tw*rand,th*0,tw,th,tx,ty,0)
                }
               
            }
            if (bottom)
            {   
                if (!bottom_right)
                {
                   tile_add(ts_Dungeon,tw*4,th*0,tw,th,tx,ty+th,-ty) 
                
                }
                else if (!bottom_left)
                {
                    tile_add(ts_Dungeon,tw*1,th*0,tw,th,tx,ty+th,-ty)
                
                }
                else
                {
                    var randomBottom = random_range(1,4)
                    tile_add(ts_Dungeon,tw*randomBottom,th*0,tw,th,tx,ty+th,-ty)
                }
                
          }
               
            
            
            
            
        }
    }
          
}
//SAVE THE ROOM FOR NEXT ROOM
ini_open("Save.ini");
var key = "default"
var val = random_get_seed()
ini_write_real("Rooms", key , val);
ini_close(); 



    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
